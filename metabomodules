#! /bin/bash -

# Copyright 2019 Bergmann's Lab UNIL <mattia.tomasoni@unil.ch>
#
#    This file is part of METABOMODULES Tool.
#
#    METABOMODULES Tool is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    METABOMODULES Tool is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    GNU General Public License: <https://www.gnu.org/licenses/>.

working_dir=$PWD
install_dir="$HOME/.metabomodules"

###################################################################################################
# HELP USAGE MESSAGE
###################################################################################################

usage() {
  echo ""
  echo "USAGE:  metabomodules --input=[...] --container=[...] [OPTIONS]"
  echo ""
  echo "  MANDATORY:"
  echo "    --input=                     path to file: 1H NMR dataset to be analysed"
  echo "    --container=                 [docker|singularity] container type"
  echo ""
  echo "  OPTIONL:"
  echo "    --output=                    directory in which to output results (default=current direcotry)"
  echo "    --method=                    [acp|isa|pca] method to be run (default=all methods will be run)"
  echo "    --number_pseudospectra=      integer: number of pseudospectra to generate (default=179)"
  echo "    --number_permutations=       integer: number of metabomatching permutations (default=9999, recommended: 9999+)"
  echo "  (method-specific options: ACP)"
  echo "    --ACP_remNeigbPairsFlag=     [true|false] remove feature pairs in the same neighborhood as other pairs"
  echo "    --ACP_OffDiagDist=           float: off diagonal distance for correlation matrixi (default=0.1)"
  echo "  (method-specific options: ISA)"
  echo "    --ISA_seedmatrix             path to file: file containing ISA seeds"
  echo "    --ISA_dsame                  float (default=0.8)"
  echo "    --ISA_dconv                  float (default=0.99)"
  echo "    --ISA_nseed                  int (default=500)"
  echo "    --ISA_seedsparsity           int (default=3)"
  echo "    --ISA_maxiter                int (default=50)"
  echo "    --ISA_sgc                    int (default=0)"
  echo "    --ISA_sgr                    int (default=1)"
  echo "    --ISA_thc                    list of int (default \"1,2,3,4,5,6\")"
  echo "    --ISA_thr                    list of int (default \"1,2,3,4,5,6\")"
  echo "    --ISA_norm                   string (default=\"double\")"
  echo "    --ISA_nt                     [true|false] "
  echo "    --ISA_inputhasheaders        [true|false] "
  echo "    --ISA_inputhaslabels         [true|false] "
  echo "    --ISA_nopurgeÂ                [true|false] "
  echo "    --ISA_quiet                  [true|false] "
  echo "    --ISA_nosweep                [true|false] "
  echo "    --ISA_onefile                [true|false] "
  echo "    --ISA_gopseudo               [true|false] "
  echo "  (filter-specific options)"
  echo "    --FILETR_z_score_th          int (default 4)"
  echo "    --FILETR_adj_score_th        int (default 2)"
  echo "    --FILETR_adj_score_th        int (default 2)"
  echo "    --FILETR_redo                [true|false]"
}

###################################################################################################
# PARAMETERS
###################################################################################################

# DEFAULTS
input="not_set"
output="not_set"
method="not_set" 
container="not_set"
number_pseudospectra=179
number_permutations=9999
ACP_OffDiagDist="0.1"
ACP_remNeigbPairsFlag="true"
ISA_seedmatrix="not_set"
ISA_dsame="0.80"
ISA_dconv="0.99"
ISA_nseed=500
ISA_seedsparsity=3
ISA_maxiter=50
ISA_sgc=0
ISA_sgr=1
ISA_thc="1,2,3,4,5,6"
ISA_thr="1,2,3,4,5,6"
ISA_norm="double"
ISA_nt="true"
ISA_inputhasheaders="false"
ISA_inputhaslabels="false"
ISA_nopurge="true"
ISA_quiet="false"
ISA_nosweep="true"
ISA_onefile="false"
ISA_gopseudo="false"
FILTER_z_score_th=4
FILTER_adj_score_th=2
FILTER_redo="false"


# READ USER INPUT #################################################################################
while [ "$1" != "" ]; do
  PARAM=`echo $1 | awk -F= '{print $1}'`
  VALUE=`echo $1 | awk -F= '{print $2}'`
  case $PARAM in
    -h | --help)
      usage 
      exit
      ;;
    --input)
      input=$VALUE
      ;;
    --container)
      container=$VALUE
      ;;
    --output)
      output=$VALUE
      ;;
    --method)
      method=$VALUE
      ;;
    --number_pseudospectra)
      number_pseudospectra=$VALUE
      ;;
    --number_permutations)
      number_permutations=$VALUE
      ;;
    --ACP_OffDiagDist)
      ACP_OffDiagDist=$VALUE
      ;;
    --ACP_remNeigbPairsFlag)
      ACP_remNeigbPairsFlag=$VALUE
      ;;
    --ISA_seedmatrix)
      ISA_seedmatrix=$VALUE
      ;;
    --ISA_dsame)
      ISA_dsame=$VALUE
      ;;
    --ISA_dconv)
      ISA_dconv=$VALUE
      ;;
    --ISA_nseed)
      ISA_nseed=$VALUE
      ;;
    --ISA_seedsparsity)
      ISA_seedsparsity=$VALUE
      ;;
    --ISA_maxiter)
      ISA_maxiter=$VALUE
      ;;
    --ISA_sgc)
      ISA_sgc=$VALUE
      ;;
    --ISA_sgr)
      ISA_sgr=$VALUE
      ;;
    --ISA_thc)
      ISA_thc=$VALUE
      ;;
    --ISA_thr)
      ISA_thr=$VALUE
      ;;
    --ISA_norm)
      ISA_norm=$VALUE
      ;;
    --ISA_nt)
      ISA_nt=$VALUE
      ;;
    --ISA_inputhasheaders)
      ISA_inputhasheaders=$VALUE
      ;;
    --ISA_inputhaslabels)
      ISA_inputhaslabels=$VALUE
      ;;
    --ISA_nopurge)
      ISA_nopurge=$VALUE
      ;;
    --ISA_quiet)
      ISA_quiet=$VALUE
      ;;
    --ISA_nosweep)
      ISA_nosweep=$VALUE
      ;;
    --ISA_onefile)
      ISA_onefile=$VALUE
      ;;
    --ISA_gopseudo)
      ISA_gopseudo=$VALUE
      ;;
    --FILTER_z_score_th)
      FILTER_z_score_th=$VALUE
      ;;
    --FILTER_adj_score_th)
      FILTER_adj_score_th=$VALUE
      ;;
    --FILTER_redo)
      FILTER_redo=$VALUE
      ;;
    *)
      echo ""
      echo "ERROR: unknown parameter \"$PARAM\""
      echo ""
      usage
      exit 1
      ;;
  esac
  shift
done

# HANDLE MANDATORY AND DEFAULT PARAMETERS #########################################################

if [ "$input" != "not_set" ]; then
  if [ ! -f "$input" ]; then
    echo "ERROR: please provide a valid file for the --input option."
    "       the file $input does not exist."
    exit 1
  else
    # copy input file to designated input location
    rm -f "$install_dir/code/input.csv";
    cp $input "$install_dir/code/input.csv";
  fi
else
  echo "ERROR: you must provide an input file (--input option)"
  usage
  exit 1
fi

if [ "$container" != "docker" -a "$container" != "singularity" ]; then
  echo "ERROR: you must specify a container type (--container option)"
  usage
  exit 1
fi
if [ "$container" = "docker" ]; then
  docker --help > /tmp/docker_test
  if ! grep -q "Usage:	docker" /tmp/docker_test; then
    echo "ERROR: you specified --container=docker, but docker is not installed."
    echo "       Please visit https://www.docker.com"
    exit 1
  fi
fi
if [ "$container" = "singularity" ]; then
  singularity --help > /tmp/singularity_test
  if ! grep -q "USAGE: singularity" /tmp/singularity_test; then
    echo "ERROR: you specified --container=singularity, but singularity is not installed."
    echo "       Please visit http://singularity.lbl.gov"
    exit 1
  fi
fi

if [ "$output" != "not_set" ]; then
  # create dir if it does not exist
  if [ ! -d "$output" ]; then
    mkdir $output
  fi
  # remove trailing slash if present
  if [[ $output == */ ]]; then
    #output=${output::-1}
    output=${output::${#output}-1}
  fi
else
  output=$working_dir
fi

if [ "$method" != "not_set" ]; then
  if [ "$method" != "isa" ]; then
    if [ "$method" != "acp" ]; then
      if [ "$method" != "pca" ]; then
        echo "ERROR: you specified --method=$method: $method is not a valid method"
        exit 1
      fi
    fi
  fi
fi




# WRITE PARAMETERS TO FILE ########################################################################
addToParametersFile() {
  echo "$1"="$2" >>  "$install_dir/code/parameters.txt"
}
rm -f "$install_dir/code/parameters.txt"
touch "$install_dir/code/parameters.txt"
addToParametersFile method "$method"
addToParametersFile number_pseudospectra "$number_pseudospectra"
addToParametersFile number_permutations "$number_permutations"
addToParametersFile ACP_OffDiagDist "$ACP_OffDiagDist"
addToParametersFile ACP_remNeigbPairsFlag "$ACP_remNeigbPairsFlag"
addToParametersFile ISA_seedmatrix "$ISA_seedmatrix"
addToParametersFile ISA_dsame "$ISA_dsame" 
addToParametersFile ISA_dconv "$ISA_dconv" 
addToParametersFile ISA_nseed "$ISA_nseed" 
addToParametersFile ISA_seedsparsity "$ISA_seedsparsity"
addToParametersFile ISA_maxiter "$ISA_maxiter"
addToParametersFile ISA_sgc "$ISA_sgc"
addToParametersFile ISA_sgr "$ISA_sgr"
addToParametersFile ISA_thc "$ISA_thc"
addToParametersFile ISA_thr "$ISA_thr"
addToParametersFile ISA_norm "$ISA_norm"
addToParametersFile ISA_nt "$ISA_nt"
addToParametersFile ISA_inputhasheaders "$ISA_inputhasheaders"
addToParametersFile ISA_inputhaslabels "$ISA_inputhaslabels"
addToParametersFile ISA_nopurge "$ISA_nopurge"
addToParametersFile ISA_quiet "$ISA_quiet"
addToParametersFile ISA_nosweep "$ISA_nosweep"
addToParametersFile ISA_onefile "$ISA_onefile"
addToParametersFile ISA_gopseudo "$ISA_gopseudo"
addToParametersFile FILTER_z_score_th "$FILTER_z_score_th"
addToParametersFile FILTER_adj_score_th "$FILTER_adj_score_th"
addToParametersFile FILTER_redo "$FILTER_redo"



###################################################################################################
# INVOKE DOCKER/SINGULARITY TO RUN THE CHOSEN METHOD
###################################################################################################

checkDockerBuildSuccess() {
  if ! grep -q "Successfully built" /tmp/docker_build_output; then
    echo "ERROR: docker build returned an error"
    echo "       - is an internet connection available?"
    echo "       - is the docker daemon running?"
    echo "see /tmp/docker_build_output for details"
    exit 1
  fi
}

checkSingularityBuildSuccess() {
  if ! grep -q "Finalizing Singularity container" /tmp/singularity_build_output; then
    echo "ERROR: singularity build returned an error"
    echo "       - is an internet connection available?"
    echo "       - is singularity running?"
    echo "see /tmp/singularity_build_output for details"
    rm -f "$install_dir/containers/"$method"/singularity/"$method"-image.img"
    exit 1
  fi
}


# take initial timestamp
begin=$(date +%s)
timestamp=`date '+%Y-%m-%d-%H%M%S'`
# increase stack memory limit
default_ulimit=$(ulimit -s) #ulimit -s 32768 > /dev/null 2>&1
# if redoing the filtering, make output of previous runs available
if [ "$FILTER_redo" = "true" ]
then	
  echo cp -R "$output"/ "$install_dir"/code/output/
  cp -R "$output"/ "$install_dir"/code/output/
fi 


# RUN THE METHOD ##################################################################################
echo "" && echo "--------------------------------------------------------------------------------"
echo "METABOMODULES"

if [ "$container" = "singularity" ]
then
  # build the singularity image (if image already exists, skip this step)
  echo "Preparing container, please wait..."
  if [ ! -f "$install_dir"/containers/singularity/image.img ]; then
    cd "$install_dir"/containers/singularity/
    singularity image.create --size 1500 ./image.img > \
     /tmp/singularity_create_output 2>&1
    sudo -E env "PATH=$PATH" singularity build ./image.img Singularity > \
     /tmp/singularity_build_output 2>&1
    cd ../../..
    checkSingularityBuildSuccess
    cd $working_dir
  fi
  # run container
  echo "Running container, please wait..."
  singularity run \
    -B "$install_dir"/code:/metabomodules_code/ \
    "$install_dir"/containers/singularity/image.img > \
    "$output"/"$timestamp"__metabomodules__console-output 2>&1
fi
if [ "$container" = "docker" ]
then
  # build the docker image (if image already exists, this command does nothing)
  echo "Preparing container, please wait..."
  sudo docker build -t metabomodules-image "$install_dir"/containers/docker \
   > /tmp/docker_build_output 2>&1
  checkDockerBuildSuccess
  # remove (old) container (if exists)
  sudo docker rm -f metabomodules-container > /tmp/docker_rm_output 2>&1
  # run (new) container
  echo "Running container, please wait..."
  sudo docker run --name="metabomodules-container" \
    -v "$install_dir"/code:/metabomodules_code/ metabomodules-image > \
    "$output"/"$timestamp"__metabomodules__console-output 2>&1
fi

ulimit -s $default_ulimit
end=$(date +%s) # calculate execution time
tottime=$(expr $end - $begin)
echo "" && echo "Exectution took $tottime seconds"

# PREPARE OUTPUT AND CLEAN UP TEMP FILES ##########################################################

output_file="$output"/"$timestamp"__metabomodules__results

if ls "$install_dir"/code/output/2*/* 1> /dev/null 2>&1; then
  echo "ERROR: no output was generated. "
  echo "       see "$output"/"$timestamp"__metabomodules__console-output"
else
  mkdir $output_file
  mv "$install_dir"/code/output/2*/* $output_file
  echo "DONE: output can be found in $output"
fi  
